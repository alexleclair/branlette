// Generated by CoffeeScript 1.6.3
(function() {
  var App, escapeshellarg,
    _this = this;

  escapeshellarg = function(arg) {
    var ret;
    ret = '';
    ret = arg.replace(/[^\\]'/g, function(m, i, s) {
      return m.slice(0, 1) + '\\\'';
    });
    return "'" + ret + "'";
  };

  App = {
    io: null,
    redis: require('redis'),
    redisWorker: null,
    fs: null,
    httpServer: null,
    express: null,
    config: {
      port: 8080,
      redisHost: 'localhost',
      redisPort: 6379,
      redisKey: 'noel:dev:',
      wwwPath: './static/',
      updateRedisTimer: 5000,
      sendAgenciesTimer: 2500,
      labels: {
        acolyte: 'Acolyte Communication',
        adviso: 'Adviso',
        bloom: 'Bloom',
        fairplay: 'Fairplay',
        onf: 'ONF',
        akufen: 'Akufen',
        attraction: 'Attraction',
        braque: 'Agence Braque',
        alfred: 'Alfred info',
        amazone: 'Amazone communications gestion',
        amuse: 'Amuse/Lowe Roche',
        bcp: 'BCP',
        beauchemin: 'Beauchemin',
        bbr: 'Bleublancrouge',
        bulle: 'Production Bulle',
        bob: 'Bob',
        brad: 'Brad',
        cap: 'Cap Communication',
        carat: 'Carat',
        cart1er: 'CART1ER',
        cavalerie: 'La Cavalerie',
        gccom: 'CGCOM',
        cossette: 'Cossette',
        coutu: 'Coutu Communication',
        cri: 'CRI',
        cundari: 'Cundari',
        decodca: 'decod.ca',
        defi: 'Défi marketing',
        dentsubos: 'DentsuBos',
        desarts: 'DesArts Communication',
        draft: 'Draftfcb',
        ecorce: 'Écorce',
        egzakt: 'Egzakt',
        em: 'EM L\'agence',
        espacem: 'Espace M',
        gendron: 'Gendron Communication',
        generation: 'Génération',
        gvm: 'Groupe GVM',
        aod: 'Group Média AOD',
        hop: 'HOP comportement de marque',
        invisible: 'la compagnie invisible',
        jazz: 'Jazz Marketing Communications',
        jwt: 'JWT',
        kabane: 'Kabane',
        kbsp: 'kbs+p',
        lesaint: 'Le saint publicité et design',
        lemieux: 'Lemieux Bédard',
        dompteurs: 'Les Dompteurs de souris',
        evades: 'Les Évadés',
        lg2: 'lg2',
        lp8: 'LP8',
        lusio: 'Lusio films',
        marketel: 'Marketel',
        martel: 'Martel et compagnie',
        mediaexperts: 'Media Experts',
        mediavation: 'Mediavation',
        merlicom: 'Merlicom',
        minimal: 'Minimal Médias',
        morrow: 'Morrow',
        nolin: 'Nolin BBDO',
        nurun: 'Nurun',
        ogilvy: 'Ogilvy Montréal',
        orangetango: 'orangetango',
        otis: 'Otis Léger Marketing',
        oui: 'Oui Marketing',
        palm: 'PALM + HAVAS',
        pheromone: 'Phéromone',
        publicis: 'Publicis',
        rc: 'Radio-Canada',
        republik: 'Republik',
        reservoir: 'Réservoir Publicité Conseil',
        ressac: 'Ressac',
        revolver3: 'revolver3',
        svyr: 'Saint-Jacques Vallée Y&R',
        sidlee: 'Sid Lee',
        tamtam: 'TAM-TAM\\TBWA',
        tank: 'TANK',
        taxi: 'TAXI',
        tequila: 'Tequila communication et marketing',
        terrain: 'Terrain marketing',
        tonik: 'Tonik Groupimage',
        touche: 'Touché! PHD',
        tp1: 'TP1',
        trinergie: 'Trinergie',
        uber: 'Über',
        upperkut: 'Upperkut',
        v: 'V',
        version10: 'version10',
        wasabi: 'Wasabi Communications',
        youville: 'Youville Communauté Créative',
        zip: 'ZiP communication',
        imedia: 'Imédia',
        picbois: 'Picbois Production'
      }
    },
    agencies: {},
    siblings: {},
    sockets: {},
    connCounter: 0,
    init: function(config) {
      var express;
      if (config != null) {
        this.config = this._mergeOptions(this.config(config));
      }
      if (process.argv.length > 2) {
        this.config.port = process.argv[2];
      }
      this.fs = require('fs');
      express = require('express');
      this.express = express.call(this);
      this.httpServer = require('http').createServer(this.express);
      this.httpServer.listen(this.config.port);
      this.io = require('socket.io').listen(this.httpServer);
      this.io.set('log level', 1);
      this.express.get('/api/*', this._handleAPICalls);
      this.express.post('/api/*', this._handleAPICalls);
      this.express.get('/*', this._handleHttpRequest);
      this.express.use(express.bodyParser());
      this.express.use(function(err, req, res, next) {
        console.error(err.stack);
        return res.send(500, 'Oops ! Something went super wrong.');
      });
      this.redisWorker = this.redis.createClient(App.config.redisPort, App.config.redisHost);
      App.loadAgencies();
      setInterval(this._saveScores, this.config.updateRedisTimer);
      setInterval(this.loadAgencies, this.config.updateRedisTimer);
      setInterval(App.sendAgencies, this.config.sendAgenciesTimer);
      return this.io.on('connection', function(socket) {
        var code;
        ++App.connCounter;
        code = App.generateCode(App.connCounter);
        App.siblings[code] = [];
        App.sockets[socket.id] = socket;
        socket.set('code', code);
        App.attachSiblings(socket, code);
        socket.emit('code', code);
        socket.emit('labels', App.config.labels);
        socket.emit('agencies', App.agencies);
        socket.on('object', function(obj) {
          return App.sendToSiblings(socket, 'object', obj);
        });
        socket.on('pick', function(agency) {
          return socket.get('agency', function(err, currentAgency) {
            if (!((err != null) || (currentAgency == null)) && (App.agencies[currentAgency] != null)) {
              App.agencies[currentAgency].people--;
            }
            if (App.agencies[agency] != null) {
              socket.set('agency', agency);
              App.agencies[agency].people++;
            }
            App.sendToSiblings(socket, 'pick', agency);
            return App.sendAgencies(socket);
          });
        });
        socket.on('shake', function(agency) {
          if (agency == null) {
            agency = null;
          }
          if ((agency != null) && (App.agencies[agency] != null)) {
            App.agencies[agency].count++;
          } else {
            socket.get('agency', function(err, currentAgency) {
              if (!((err != null) || (currentAgency == null)) && (App.agencies[currentAgency] != null)) {
                return App.agencies[currentAgency].count++;
              }
            });
          }
          App.sendAgencies(socket);
          return App.sendToSiblings(socket, 'shake', agency);
        });
        socket.on('registerSibling', function(inviteId) {
          console.log('INVITED', inviteId);
          if ((App.siblings == null) || (App.siblings[inviteId] == null)) {
            socket.emit('wrongcode');
            return;
          }
          socket.set('code', inviteId);
          App.attachSiblings(socket, inviteId);
          return App.sendToSiblings(socket, 'siblingsCount', App.siblings[inviteId].length);
        });
        return socket.on('disconnect', function() {
          socket.get('agency', function(err, currentAgency) {
            if (!((err != null) || (currentAgency == null)) && (App.agencies[currentAgency] != null)) {
              App.agencies[currentAgency].people--;
              return App.sendAgencies(socket);
            }
          });
          socket.get('code', function(err, code) {
            var index;
            if (code != null) {
              index = App.siblings[code].indexOf(socket.id);
              if (index >= 0) {
                App.siblings[code].splice(index, 1);
              }
              App.sendToSiblings(socket, 'siblingsCount', App.siblings[code].length);
              if (App.siblings[code].length === 0) {
                return delete App.siblings[code];
              }
            }
          });
          return delete App.sockets[socket.id];
        });
      });
    },
    attachSiblings: function(socket, code) {
      if ((App.siblings != null) && App.siblings[code] && App.siblings[code].indexOf(code) < 0) {
        return App.siblings[code].push(socket.id);
      }
    },
    sendToSiblings: function(socket) {
      var args, i, _i, _ref;
      args = [];
      for (i = _i = 1, _ref = arguments.length; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
        args.push(arguments[i]);
      }
      return socket.get('code', function(err, code) {
        var socketId, _j, _ref1, _results;
        if (App.siblings[code] != null) {
          _results = [];
          for (i = _j = 0, _ref1 = App.siblings[code].length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
            try {
              socketId = App.siblings[code][i];
              if (App.sockets[socketId] != null) {
                if (args.length === 1) {
                  _results.push(App.sockets[socketId].emit(args[0]));
                } else if (args.length >= 2) {
                  _results.push(App.sockets[socketId].emit(args[0], args[1]));
                } else {
                  _results.push(void 0);
                }
              } else {
                _results.push(void 0);
              }
            } catch (_error) {
              err = _error;
              _results.push(console.log('[error] ', err.message, err));
            }
          }
          return _results;
        }
      });
    },
    generateCode: function(id) {
      var allowedChars, code, i, _i;
      allowedChars = 'abcdefghijklmnopqrstuvwxyz0123456789'.split("");
      code = '';
      for (i = _i = 0; _i < 3; i = ++_i) {
        code += '' + allowedChars[Math.floor(Math.random() * allowedChars.length)];
      }
      return code + '' + (id + 1000).toString(36);
    },
    loadAgencies: function() {
      var _this = this;
      return App.redisWorker.smembers(App.config.redisKey + 'agencies', function(err, reply) {
        var e, i, key, val, _call, _i, _modified, _ref, _results;
        if (typeof reply === 'string') {
          reply = [reply];
        }
        for (i = _i = 0, _ref = reply.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          try {
            val = JSON.parse(reply[i]);
            if (App.config.labels[val.key] == null) {
              App.config.labels[val.key] = val.label;
            }
          } catch (_error) {
            e = _error;
            continue;
          }
        }
        _modified = 0;
        _results = [];
        for (key in App.config.labels) {
          _call = function(_key) {
            return App.redisWorker.get(App.config.redisKey + 'agency:' + _key, function(err, reply) {
              val = reply;
              if (val == null) {
                val = 0;
              }
              if (App.agencies[_key] == null) {
                App.io.sockets.emit('labels', App.config.labels);
                App.sendAgencies();
                return App.agencies[_key] = {
                  count: val,
                  people: 0
                };
              }
            });
          };
          _results.push(_call(key));
        }
        return _results;
      });
    },
    sendAgencies: function(socket) {
      var e;
      if (socket == null) {
        socket = null;
      }
      if (socket != null) {
        try {
          App.sendToSiblings(socket, 'agencies', App.agencies);
        } catch (_error) {
          e = _error;
        }
        return;
      }
      return App.io.sockets.emit('agencies', App.agencies);
    },
    _handleAPICalls: function(req, res) {
      var allowedChars, i, key, method, module, obj, parts, _i, _key, _ref,
        _this = this;
      parts = req.url.split('?')[0].split('/');
      if (parts.length < 4) {
        res.writeHead('500');
        res.end('API calls expect at least a module/parameter combo.');
        return;
      }
      module = parts[2];
      method = parts[3];
      switch (module) {
        case "stats":
          res.setHeader('Content-Type', 'application/json');
          res.send(JSON.stringify(App.agencies));
          return false;
        case "agency":
          if (method === 'add') {
            if ((req.query != null) && (req.query.name != null)) {
              App.redisWorker.sadd(App.config.redisKey + 'wishlist', req.query.name);
            }
            return res.end(JSON.stringify(true));
          } else if (method === 'wishlist') {
            return App.redisWorker.smembers(App.config.redisKey + 'wishlist', function(err, reply) {
              return res.end(JSON.stringify(reply));
            });
          } else if (method === 'refuse') {
            if ((req.query != null) && (req.query.name != null)) {
              App.redisWorker.srem(App.config.redisKey + 'wishlist', req.query.name);
            }
            return res.end(JSON.stringify(true));
          } else if (method === 'remove') {
            if ((req.query != null) && (req.query.key != null) && (App.config.labels[req.query.key] != null)) {
              obj = {
                label: App.config.labels[req.query.key],
                key: req.query.key
              };
              App.redisWorker.srem(App.config.redisKey + 'agencies', JSON.stringify(obj));
              if (App.config.labels[req.query.key] != null) {
                delete App.config.labels[req.query.key];
              }
              if (App.agencies[req.query.key] != null) {
                delete App.agencies[req.query.key];
              }
            }
            return res.end(JSON.stringify(true));
          } else if (method === 'approve') {
            if ((req.query != null) && (req.query.name != null)) {
              key = req.query.name.toLowerCase().split('');
              allowedChars = 'abcdefghijklmnopqrstuvwxyz0123456789'.split('');
              _key = '';
              for (i = _i = 0, _ref = key.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
                if (allowedChars.indexOf(key[i]) >= 0) {
                  _key += key[i];
                }
              }
              key = _key;
              App.redisWorker.get(App.config.redisKey + 'agency:' + key, function(err, reply) {
                var val;
                if (reply === null) {
                  val = {
                    label: req.query.name,
                    key: key
                  };
                  App.redisWorker.srem(App.config.redisKey + 'wishlist', req.query.name);
                  return App.redisWorker.sadd(App.config.redisKey + 'agencies', JSON.stringify(val), function(err, reply) {
                    return App.loadAgencies();
                  });
                }
              });
              if ((req.query != null) && req.query.callback) {
                res.end(req.query.callback + '(' + JSON.stringify(key) + ')');
              } else {
                res.end(JSON.stringify(key));
              }
              return;
            }
            return res.end(JSON.stringify(true));
          } else {
            res.writeHead('404');
            return res.end('Method ' + method + ' not found');
          }
          break;
        default:
          res.writeHead('404');
          return res.end('Module ' + module + ' not found');
      }
    },
    _saveScores: function() {
      var key, _results;
      _results = [];
      for (key in App.agencies) {
        _results.push(App.redisWorker.set(App.config.redisKey + 'agency:' + key, App.agencies[key].count, function(err, reply) {}));
      }
      return _results;
    },
    _saveEvent: function(data, callback) {
      return App.redisWorker.zadd(['clowntriste:events', new Date().getTime(), JSON.stringify(data)], function(err, reply) {
        return callback(reply);
      });
    },
    _handleHttpRequest: function(req, res) {
      var file, path;
      file = req.url.split('?')[0];
      file = file === '/' ? 'index.html' : file;
      file = file.split('..').join('');
      path = __dirname + '/' + App.config.wwwPath + file;
      return App.fs.readFile(path, function(err, data) {
        if (err) {
          res.writeHead('500');
          return res.end('Error loading ' + file);
        }
        res.writeHead('200');
        return res.end(data);
      });
    }
  };

  App.init();

}).call(this);
